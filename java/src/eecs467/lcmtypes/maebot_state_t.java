/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package eecs467.lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class maebot_state_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int encoder_left_ticks;
    public int encoder_right_ticks;
    public short motor_left_speed_cmd;
    public short motor_right_speed_cmd;
    public short accel[];
    public short gyro[];
    public short line_sensors[];
    public short range;
    public short motor_current_left;
    public short motor_current_right;
 
    public maebot_state_t()
    {
        accel = new short[3];
        gyro = new short[3];
        line_sensors = new short[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc45c062710e35792L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(eecs467.lcmtypes.maebot_state_t.class))
            return 0L;
 
        classes.add(eecs467.lcmtypes.maebot_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.encoder_left_ticks); 
 
        outs.writeInt(this.encoder_right_ticks); 
 
        outs.writeShort(this.motor_left_speed_cmd); 
 
        outs.writeShort(this.motor_right_speed_cmd); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.line_sensors[a]); 
        }
 
        outs.writeShort(this.range); 
 
        outs.writeShort(this.motor_current_left); 
 
        outs.writeShort(this.motor_current_right); 
 
    }
 
    public maebot_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public maebot_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static eecs467.lcmtypes.maebot_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        eecs467.lcmtypes.maebot_state_t o = new eecs467.lcmtypes.maebot_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.encoder_left_ticks = ins.readInt();
 
        this.encoder_right_ticks = ins.readInt();
 
        this.motor_left_speed_cmd = ins.readShort();
 
        this.motor_right_speed_cmd = ins.readShort();
 
        this.accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readShort();
        }
 
        this.gyro = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyro[a] = ins.readShort();
        }
 
        this.line_sensors = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.line_sensors[a] = ins.readShort();
        }
 
        this.range = ins.readShort();
 
        this.motor_current_left = ins.readShort();
 
        this.motor_current_right = ins.readShort();
 
    }
 
    public eecs467.lcmtypes.maebot_state_t copy()
    {
        eecs467.lcmtypes.maebot_state_t outobj = new eecs467.lcmtypes.maebot_state_t();
        outobj.timestamp = this.timestamp;
 
        outobj.encoder_left_ticks = this.encoder_left_ticks;
 
        outobj.encoder_right_ticks = this.encoder_right_ticks;
 
        outobj.motor_left_speed_cmd = this.motor_left_speed_cmd;
 
        outobj.motor_right_speed_cmd = this.motor_right_speed_cmd;
 
        outobj.accel = new short[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.gyro = new short[(int) 3];
        System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3); 
        outobj.line_sensors = new short[(int) 3];
        System.arraycopy(this.line_sensors, 0, outobj.line_sensors, 0, 3); 
        outobj.range = this.range;
 
        outobj.motor_current_left = this.motor_current_left;
 
        outobj.motor_current_right = this.motor_current_right;
 
        return outobj;
    }
 
}

